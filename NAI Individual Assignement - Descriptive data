#'===========================================================================================
#'9595N1: Network Analysis and Infographics
#'SPRU Science Policy Research Unit, University of Sussex
#'===========================================================================================
#'NAI Individual Assignement - Descriptive data
#'===========================================================================================


#0.Remove objects and load igraph ----------
rm(list=ls())
library(igraph)
library(tidyverse)                                                     
library(readr)

library(reshape2)

# reading the csv:
setwd("C:/Users/Gildas/OneDrive/MSC SUSDEV/NAI/NAI Individual Assignement/data_for_students/csv_clean")
Advanced_Materials <- read_csv("Advanced Materials_UTF8_clean.csv")
Biotech <- read_csv("Biotech_UTF8_clean.csv")
Microelectronics <- read_csv("Microelectronics_UTF8_clean.csv")
Nanotech <- read_csv("Nanotech_UTF8_clean.csv")
Photonics <- read_csv("Photonics_UTF8_clean.csv")

Advanced_Materials$Sector <- "Advanced_Materials"
Advanced_Materials$Counts <- 1/nrow(Advanced_Materials)

Biotech$Sector <- "Biotech"
Biotech$Counts <- 1/nrow(Biotech)

Microelectronics$Sector <- "Microelectronics"
Microelectronics$Counts <- 1/nrow(Microelectronics)

Nanotech$Sector <- "Nanotech"
Nanotech$Counts <- 1/nrow(Nanotech)

# legend on graph

g <- graph.formula(1-2, 2-3, 3-4, 4-4, 5-5, 6-6, 7-7, 8-8, 9-9)  #List of edges
sector=c("Indutry", "Consulting", "Private Non-Profit", "Research Organisation", "Research Hospital", "Government", "Education", "Other", "Not Applicable")
colour=c("red", "pink", "violet", "blue", "lightblue", "green", "yellow", "grey", "black")
#Explore the network
V(g)                                                        #Nodes
E(g)                                                        #Edges

E(g)$size = 0
V(g)$color = colour
V(g)$name = sector    

get.adjacency(g)                                            #Adjacency matrix
plot(g)                                                     #Display the network


Photonics$Sector <- "Photonics"
Photonics$Counts <- 1/nrow(Photonics)

Horizon <- rbind(Advanced_Materials, Biotech, Microelectronics, Nanotech, Photonics)

ggplot(data = Horizon) +
  geom_bar(mapping = aes(x = Sector, fill = OrgType), position = "fill")

Horizon_t <- Horizon %>%
    group_by(Sector, OrgType) %>%
    summarize(count = sum(Counts))
Horizon_n = dcast(Horizon_t, OrgType ~ Sector, value.var = "count")
Horizon_n

Horizon_t <- Horizon %>%
  group_by(Sector, OrgType) %>%
  summarize(count = sum(n()))
Horizon_n = dcast(Horizon_t, OrgType ~ Sector, value.var = "count")
Horizon_n
ggplot(data = Horizon) +
  geom_bar(mapping = aes(x = Sector, fill = OrgType), position = "stack")

# get the average number of actors by projects

Horizon$n = 1
Horizon_loin <- Horizon %>%
  group_by(Sector, ProjectID) %>%
  summarize(count = sum(n()))
Horizon_loin
Horizon_loinHt = dcast(Horizon_loin, ProjectID ~ Sector, value.var = "count")
Horizon_loinHt


Horizon$n = 1
Horizon_loin <- Horizon %>%
  group_by(Sector, ProjectID) %>%
  summarize(count = sum(n())) %>%
  ungroup() %>%
  group_by(Sector) %>%  
  summarise(mean = sum(count), max=max(count), mean = mean(count), median = median(count), quantile = quantile(count, 0.75), sd = sd(count))
Horizon_loin
     
   
# Lets graph average projects participants by domain
Horizon$n = 1
Horizon_by_project <- Horizon %>%
  group_by(Sector, ProjectID) %>%
  summarize(count = sum(n()))
ggplot(data = Horizon_by_project, mapping = aes(x = Sector, y = count)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0) +
  coord_flip()

ggplot(data = Horizon_by_project) +
  geom_violin(mapping = aes(x = Sector, y = count)) + 
  coord_flip()


ggplot(data = Horizon_by_project, mapping = aes(x = Sector, y = count)) +
  geom_point() +
  geom_smooth(mapping = aes(color = Sector), se = FALSE)

ggplot(data = Horizon_by_project, mapping = aes(x = Sector, y = count)) +
  geom_point(mapping = aes(size = count)) +
  geom_smooth()

ggplot(data = Horizon_by_project) +
  geom_bin2d(mapping = aes(x = Sector, y = count), bins = c(50, 40))
